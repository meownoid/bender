import os

from bender.cli.utils import import_entities
from bender.converter import Converter
from bender.editor import Editor
from bender.processor import Processor


def generate_autocomplete(entities):
    algorithms = {}

    for name, entity in entities.items():
        parameters = set()
        for parameter_name, _ in entity.parameters.items():
            parameters.add(parameter_name)

        algorithms[name] = list(parameters)

    return algorithms


def print_list(xs, indent=0):
    output = []

    def write(line):
        output.append(line)

    write("[\n")
    for x in xs:
        write(" " * (indent + 4) + f'"{x}",\n')
    write(" " * indent + "]")
    return "".join(output)


def print_dict(xs, indent=0):
    output = []

    def write(line):
        output.append(line)

    write("{\n")
    for key, value in xs.items():
        write(" " * (indent + 4) + f'"{key}": ')
        if isinstance(value, list):
            write(print_list(value, indent + 4))
            write(",\n")
        elif isinstance(value, dict):
            write(print_dict(value, indent + 4))
            write(",\n")
        elif isinstance(value, str):
            write(f'"{value}",\n')
        else:
            raise ValueError(f"Unsupported type: {type(value)}")
    write(" " * indent + "}")
    return "".join(output)


def main():
    convert_algorithms = generate_autocomplete(
        import_entities(Converter, "bender.converters")
    )
    edit_algorithms = generate_autocomplete(import_entities(Editor, "bender.editors"))
    process_algorithms = generate_autocomplete(
        import_entities(Processor, "bender.processors")
    )

    output_path = os.path.join("bender", "cli", "autocomplete_data.py")
    with open(output_path, "w") as f:
        f.write("# This file is auto-generated by generate_autocomplete.py\n\n")
        f.write("AUTOCOMPLETE = ")
        f.write(
            "".join(
                print_dict(
                    {
                        "convert": convert_algorithms,
                        "edit": edit_algorithms,
                        "process": process_algorithms,
                    }
                )
            )
        )
        f.write("\n")


if __name__ == "__main__":
    main()
